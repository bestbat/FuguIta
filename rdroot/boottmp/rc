# Copyright (c) 2006--2017 Yoshihiro Kawamata
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are
# met:
# 
#   * Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
# 
#   * Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in
#     the documentation and/or other materials provided with the
#     distribution.
# 
#   * Neither the name of Yoshihiro Kawamata nor the names of its
#     contributors may be used to endorse or promote products derived
#     from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
# "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
# LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
# A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
# LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
# THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


#====================
# interim rc file for LiveCD
#
# KAWAMATA, Yoshihiro
# kaw@on.rim.or.jp
#


#====================
# Global Definitions
#====================
init_args="$@"
osrel=`sysctl -n kern.osrelease`
osmac=`sysctl -n hw.machine`

#-------------------------------
# make a list of all partitions
#
scan_disks () {
    #-------------------------------
    # make a list of all partitions
    #
    for dsk in `sysctl -n hw.disknames | /boottmp/sed -E -e 's/:[0-9a-f]+/:/g; s/[:,]+/ /g;'`; do
        case $dsk in
            [csw]d[0-9]*)
                disklabel -c -pm $dsk 2>/dev/null \
                    | /boottmp/sed -E -e '/^  [abd-p]: /!d; s/^  (.):/'$dsk'\1/'
                ;;
        esac
    done > /boottmp/boot_partitions


    #-------------------------------
    # inspecting every disk partitions
    #
    echo -n "scanning partitions:"
    unset partlst part_sys part_sto part_swp part_noask
    while read ln; do
        set -- $ln
        part="$1"
        fstype="$4"
        partlst=${partlst:+"$partlst "}$part
        echo -n " $part"
        case $fstype in
            swap) part_swp=${part_swp:+"$part_swp "}$part ;;
            *) if mount -r /dev/$part /mnt 2>/dev/null; then
                   set -- /mnt/ISO/FuguIta-${osrel}-${osmac}-?????????.iso
                   if [ -f /mnt/fuguita-${osrel}-${osmac}.ffsimg -o ! X"$1" = X"/mnt/ISO/FuguIta-${osrel}-${osmac}-?????????.iso" ]; then
                       part_sys=${part_sys:+"$part_sys "}$part
                   fi
                   if [ -d /mnt/livecd-config ]; then
                       part_sto=${part_sto:+"$part_sto "}$part
                   fi
                   if [ -f /mnt/noasks ]; then
                       part_noask=${part_noask:+"$part_noask "}$part
                   fi
                   umount /dev/$part
               fi
            ;;
        esac
    done < /boottmp/boot_partitions
    echo
}

#-------------------------------
# make shadow directory
#
#    mkshadowdir orig-dir shadow-dir
#
mkshadowdir() {
    [ -d "$1" ]   || return
    mkdir -p "$2" || return
    (if cd "$2" ; then
         lndir -s $1
         (cd "$1" && mtree -cdtq) | mtree -edtq -u >/dev/null
     fi)
}


#====================
# Active code from here
#====================
# setup file systems;
#   1. /         ...  rd - ram disk attached to kernel
#   2. /sysmedia ...  CD or USB flashdrive - containing FFS system image
#   3. /fuguita  ...  vnode disk - mounted FFS system image
#   4. /ram      ...  user-modifiable file system
#

cd /

#-------------------------------
# create fstab then mount by it
#
mount -w /dev/rd0a /
: > /boottmp/boot_starts

#----------------------------
# detect boot-failure loop
#
if [ -r /boottmp/boot_tries ]; then
    read boot_tries < /boottmp/boot_tries
    boot_tries=$((boot_tries+1))
else
    boot_tries=1
fi

if [ $boot_tries -ge 10 ]; then
    echo 'Boot retries exceeded.'
    echo -n 'emergency stop ->'; read dummy
    boot_tries=0
fi
echo $boot_tries > /boottmp/boot_tries

#-------------------------------
# ask which system-stored device is.
#
echo '
============================================
=     ______               __   _
=    / ____/              |  |_| |__
=   / /____  ______  __  _|  /_   _/_____
=  / ___/ / / / __ \/ / / |  | | | /  _  |
= / /  / /_/ / /_/ / /_/ /|  | | |_| (_) |__
=/_/   \____/\__  /\____/ |__| \___/____/__/
=            __/ /
=           /___/
=
= Welcome to FuguIta!  -  OpenBSD Live System
=                 http://fuguita.org/?FuguIta
=============================================
'

scan_disks

#-------------------------------
# set noask parameters
# from a single noasks file
#
set -- $part_noask
if [ $# -eq 1 ]; then
    if [ ! X"$1" = X ] &&
    mount -r /dev/$1 /mnt; then
        if [ -r /mnt/noasks ]; then
            . /mnt/noasks
        fi
        umount /mnt
    fi
elif [ $# -gt 1 ]; then
    echo "Warning: There are multiple noask files: ${part_noask}."
    echo "disabling non-interactive boot ..."
fi

#-------------------------------
# wait for cancelling non-interactive boot
#
if [ "X${noask_rdev}${noask_umem}${noask_setup_rw_mode}${noask_confdev}${noask_confdir}" != X ]; then
    trap "unset noask_rdev noask_umem noask_setup_rw_mode noask_confdev noask_confdir; echo ' ... cancelled'" 2
    echo "Press ^C to cancel non-interactive boot"
    sleep 5
fi
trap - 2


#-------------------------------
# ask user for FuguIta's operating device
#
if [ X"$part_sys" = X ]; then
    echo "Warning: None of FuguIta's operating device(s) found." 
else
    echo "FuguIta's operating device(s): ${part_sys}."
    set -- $part_sys
    if [ $# -eq 1 ]; then
        def_rdev="$1"
    fi
fi

if [ X = X"$noask_rdev" ]; then
    while :; do
        echo -n "Which is FuguIta's operating device? ${def_rdev:+[default: ${def_rdev}] }-> "
        read rdev
        [ -n "${def_rdev}${rdev}" ] && break
    done
    [ -z "${rdev}" ] && rdev="$def_rdev"
else
    echo "Which is FuguIta's operating device? -> $noask_rdev"
    rdev="$noask_rdev"
    noask_rdev=''
fi


#-------------------------------
# mount system-stored device
#
    vn_devname="vnd5"
vn_devname_iso="vnd4"

/sbin/mount -r /dev/${rdev} /fuguita || exit
if [ -f /fuguita/fuguita-${osrel}-${osmac}.ffsimg ]; then
    /sbin/umount /fuguita
    /sbin/mount -r /dev/${rdev} /sysmedia
    /sbin/vnconfig ${vn_devname} /sysmedia/fuguita-${osrel}-${osmac}.ffsimg
    /sbin/mount -r /dev/${vn_devname}a /fuguita
elif [ -d /fuguita/ISO ]; then
    /sbin/umount /fuguita
    /sbin/mount -r /dev/${rdev} /sysmedia
    set -- /sysmedia/ISO/FuguIta-${osrel}-${osmac}-?????????.iso
    shift $(($# - 1))
    if [ ! X"$1" = X -a \
         ! X"$1" = "X/sysmedia/ISO/FuguIta-${osrel}-${osmac}-?????????.iso" ] ;then
        umount /sysmedia
        mount -r /dev/${rdev} /sysmedia-iso
        /sbin/vnconfig ${vn_devname_iso} /sysmedia-iso/ISO/${1##*/}
        /sbin/mount -r /dev/${vn_devname_iso}a /sysmedia
        /sbin/vnconfig ${vn_devname} /sysmedia/fuguita-${osrel}-${osmac}.ffsimg
        /sbin/mount -r /dev/${vn_devname}a /fuguita
    fi
fi

#-------------------------------
# activate swap partition(s)
#
if [ -n "$part_swp" ]; then
    for swdev in $part_swp; do
        echo "activating swap partition: /dev/$swdev"
        swapon /dev/$swdev
    done
fi

#-------------------------------
# set ram size
#
maxmem=`sysctl -n hw.physmem`
maxmem=`/fuguita/usr/sbin/chroot /fuguita /usr/bin/dc -e "$maxmem 1024 / 1024 / p"`
defmem=0

echo "  user memory: $maxmem MB"
echo "Enter tmpfs size in MB. (0MB is auto)"
echo -n "[default: ${defmem}MB] -> "
if [ X = X"$noask_umem" ]; then
    read umem
else
    echo $noask_umem
    umem="$noask_umem"
    noask_umem=''
fi

if [ X = X"$umem" ]; then
    umem="$defmem"
fi

#-------------------------------
# check ram size
#
if [ $maxmem -lt $umem ]; then
    echo "set tmpfs size to maximum limit: ${maxmem}MB"
    umem=$maxmem
elif [ X"$umem" = X0 ]; then
    echo "tmpfs size will be automatically allocated"
else
    echo "set tmpfs size to ${umem}MB"
fi

/fuguita/sbin/mount_tmpfs -s ${umem}M -o wxallowed tmpfs /ram || exit

#-------------------------------
# generate fstab from current
# mounting status
#
/sbin/mount | \
while read ln; do
    set - $ln
    case X"$3"X in
        X/X)
            echo /dev/rd0a / ffs rw 0 0 ;;
        X/fuguitaX|X/sysmediaX)
            echo $1 $3 $5 ro 0 0 ;;
        X/ramX)
            echo tmpfs $3 $5 rw,wxallowed 0 0 ;;
        *)
            echo $1 $3 $5 defaults 0 0 ;;
    esac
done >/boottmp/fstab

#----------------------------
# re-link bin dirs to System device
#
/fuguita/bin/rm -rf /bin /sbin
/fuguita/bin/ln -sf fuguita/bin fuguita/sbin .

while :; do

    #----------------------------
    # detect select-mode failure loop
    #
    if [ "X$select_mode_tries" = X ]; then
        select_mode_tries=1
    else
        select_mode_tries=$(($select_mode_tries+1))
    fi

    if [ $select_mode_tries -ge 10 ]; then
        echo 'Too many boot retries.'
        echo -n 'emergency stop ->'; read dummy
        unset select_mode_tries
    fi

    #----------------------------
    # boot modes
    #
    echo 'Select boot mode;'
    echo '  0: fresh boot (normal)'
    echo '  1: fresh boot (lower memory, faster boot than mode 0)'
    echo '  2: fresh boot (works only on tmpfs)'
    echo '  3: retrieve user data from USB flash memory'
    echo '  4: retrieve user data from floppy disk'
    echo '  5: interactive shell for debugging'
    echo -n '->'
    if [ X = X"$noask_setup_rw_mode" ]; then
        read setup_rw_mode
    else
        echo $noask_setup_rw_mode
        setup_rw_mode="$noask_setup_rw_mode"
        noask_setup_rw_mode=''
    fi

    case X"$setup_rw_mode" in

        #-----------------------
        #-----------------------
        # System Storage only mode
        #-----------------------
        #-----------------------
        #
        X[012])
        if [ X"$setup_rw_mode" = X0 ]; then
            echo "manual"
        elif [ X"$setup_rw_mode" = X1 ]; then
            echo "manual_less_ram"
        elif [ X"$setup_rw_mode" = X2 ]; then
            echo "manual_more_ram"
        fi > /boottmp/boot_mode

        #-------------------------------------
        # copy System Storage contents to rw-able file system
        #
        echo "Running manual setup."
        echo -n "Copying system files to /ram ... "
        cd /ram
        if [ X"$setup_rw_mode" = X0 ]; then
            (cd ../fuguita && tar cf - altroot etc home tmp root var) | tar xpf -
        elif [ X"$setup_rw_mode" = X1 ]; then
            (cd ../fuguita && tar cf - altroot etc home tmp root var) \
            | tar -x \
                  -p \
                  -f - \
                  -s '|^etc/X11/.*||' \
                  -s '|^etc/firmware.*||' \
                  -s '|^var/db/pkg/.*||' \
                  -s '|^var/www/htdocs/.*||'
        elif [ X"$setup_rw_mode" = X2 ]; then
            (cd ../fuguita && pax -rwpe . /ram/. && cd /)
        fi
        echo "done"

        #-----------------------
        # symlink from / to ram
        #
        cd /
        rm -rf /tmp
        mv /etc /bootetc
        ln -sf ram/* . 2>/dev/null
        cp /boottmp/fstab /etc

        #-------------------------------------------
        # symlink rest of contents from / to System Storage
        #
        ln -s fuguita/* .     2>/dev/null
        #ln -s fuguita/.??* . 2>/dev/null ; # Maybe not needed

        if [ X"$setup_rw_mode" = X0 ]; then
            #-------------------------------------------
            # extract pre-build symlinks archive
            # or lndir from /ram/usr to /fuguita/usr
            #
            if [ -r /fuguita/usr/fuguita/etc/mode0symlinks.cpio.gz \
                 -a ! -e /boottmp/force_lndir ]; then
                echo -n "Extracting symlinks from /ram to /fuguita ... "
                (cd /ram && pax -rzpe -f /fuguita/usr/fuguita/etc/mode0symlinks.cpio.gz)
            else
                echo -n "Linking files from /ram to /fuguita ... "
                mkshadowdir /fuguita/usr /ram/usr


                #-------------------------------------------
                # KLUDGE: Re-lndir under /usr/local/lib/X11/fonts
                #
                if [ -h /ram/usr/local/lib/X11/fonts ]; then
                    rm /ram/usr/local/lib/X11/fonts
                    mkshadowdir /fuguita/usr/local/lib/X11/fonts /ram/usr/local/lib/X11/fonts
                fi
            fi

            #-------------------------------------------
            # set time stamp of dirs containing font files
            # (to avoid re-build font caches)
            #
            (cd /ram && for d in usr/*/lib/X11/fonts/*; do touch -cm -r /fuguita/$d $d; done)

            #-------------------------------------------
            # Then, copy again for trivial dirs
            #
            for d in \
                usr/libexec/auth \
                usr/local/lib/wnn
              do
              if [ -d /fuguita/$d ]; then
                  rm -rf /ram/$d && cd `dirname /fuguita/$d` && pax -rwpe `basename $d` `dirname /ram/$d`
              fi
            done

            #-------------------------------------------
            # Next, copy some files
            #
            for f in \
                usr/local/info/dir \
                usr/local/share/info/dir \
                usr/local/man/mandoc.db
              do
              if [ -f /fuguita/$f ]; then
                  rm -f /ram/$f && cp -p /fuguita/$f /ram/$f
              fi
            done

            #-------------------------------------------
            # Replace dir to symlink
            #
            rm -r /ram/usr/local/lib/X11/app-defaults
            ln -s /etc/X11/app-defaults /ram/usr/local/lib/X11/app-defaults

            cd / && ln -sf ram/usr .
        elif [ X"$setup_rw_mode" = X1 ]; then
            (cd /ram/etc && ln -s /fuguita/etc/firmware .)
            mkshadowdir /fuguita/etc/X11        /ram/etc/X11
            mkshadowdir /fuguita/var/db/pkg     /ram/var/db/pkg
            mkshadowdir /fuguita/var/www/htdocs /ram/var/www/htdocs
        elif [ X"$setup_rw_mode" = X2 ]; then
            umount -f /fuguita
            grep -v '/fuguita' /etc/fstab > /etc/fstab.tmp
            mv /etc/fstab.tmp /etc/fstab

            if [ -f /sysmedia/fuguita-${osrel}-${osmac}.ffsimg ]; then
                vnconfig -u ${vn_devname}
                umount -f /sysmedia
                grep -v '/sysmedia' /etc/fstab > /etc/fstab.tmp
                mv /etc/fstab.tmp /etc/fstab
            fi
            if [ -d /sysmedia-iso/ISO ]; then
                vnconfig -u ${vn_devname_iso}
                umount -f /sysmedia-iso
                grep -v '/sysmedia-iso' /etc/fstab > /etc/fstab.tmp
                mv /etc/fstab.tmp /etc/fstab
            fi
        fi

        echo "done"

        #========================================
        # setup in /etc (network etc...)
        #
        echo "Keyboard type;"
        while :; do
            kbd -l | sed -e '1,3d; /^$/d' | sort | paste - - - -
            echo -n '-> '; read kbtype
            if kbd $kbtype; then
                echo $kbtype > /etc/kbdtype
                break
            fi
        done

        echo "Please wait ... "
        until passwd root
          do
          echo "passwd failed, Try again."
        done

        echo -n 'host name (without domain) -> '; read myhost
        if [ X"$myhost" = X ]; then
            myhost=fuguita
        fi
        echo $myhost >/etc/myname

        #-----------------------
        # Network configuration
        #
        ifconfig_out=`ifconfig -a`
        nicifs=`echo "$ifconfig_out" | grep ' mtu 1500$' | cut -d: -f1`
        if [ X"$nicifs" = X ]; then
            echo 'No available network interfaces found.'
            ipv='n'
        else
            echo -n 'IP version(s) to use [n, 4, 6 or 46]-> '; read ipv
            set - $nicifs
            nicifs="$@"
            defnic="$1"
        fi

        case X"$ipv" in
            #-----------------------
            # IP-generic configs
            #
            X*[46]*)
                echo "==[ifconfig -a]========================="
                echo "$ifconfig_out"
                echo "========================================"
                echo "Available network interface(s): $nicifs"
                echo -n "network interface to setup [$defnic] -> "; read mynic
                if [ X"$mynic" = X ]; then
                    mynic=$defnic
                fi
                : > /etc/hostname.$mynic
                chmod 0640 /etc/hostname.$mynic

                #-----------------------
                # host names
                #
                echo -n "FQDN of this host -> ${myhost}."; read mydomain
                if [ ! X"$mydomain" = X ]; then
                    myfqdn=${myhost}.${mydomain}
                    echo "search $mydomain" > /etc/resolv.conf
                    echo $myfqdn > /etc/myname
                fi
                echo '127.0.0.1 localhost'  > /etc/hosts
                echo '::1       localhost' >> /etc/hosts

                #-----------------------
                # wireless settings
                #
                if ifconfig "$mynic" 2>/dev/null | grep -q 'groups:.*wlan'; then
                    wlan=''
                    echo -n 'Wi-Fi SSID -> '; read ssid
                    if [ -n "$ssid" ]; then
                        wlan="nwid $ssid"
                        echo -n '   WPA Key -> '; read wpakey
                        if [ -z "$wpakey" ]; then
                            echo -n '   WEP Key -> '; read wepkey
                            if [ -n "$wepkey" ]; then
                                wlan="$wlan nwkey $wepkey"
                            fi
                        else
                            wlan="$wlan wpakey $wpakey"
                        fi
                    fi
                    if [ -n "$wlan" ]; then
                        echo "$wlan" >> "/etc/hostname.$mynic"
                    fi
                fi
 
                #-----------------------
                # name resolutions
                #
                echo 'DNS setup;'
                echo '  Manual : Enter up to three IPv4/IPv6 addresses, separated by spaces'
                echo '  DHCP   : Just press ENTER .'
                echo '  no DNS : Enter "none".'
                echo -n '-> '; read mydns

                mydns=`echo -n $mydns | tr -cs '0-9A-Za-z:.%' ' '`
                if [ X"$mydns" = X -o X"$mydns" = Xdhcp ]; then
                    echo "lookup file bind" >> /etc/resolv.conf

                    #-----------------------
                    # IPv4 configs
                    #
                    case X"$ipv" in
                        X*4*)
                            echo "dhcp" >> /etc/hostname.$mynic
                            ;;
                    esac
                else
                    if [ X"$mydns" == Xnone ]; then
                        echo "lookup file"      >> /etc/resolv.conf
                    else
                        echo "lookup file bind" >> /etc/resolv.conf
                        set -- $mydns
                        [ ! X"$1" = X ] && echo "nameserver $1"          >> /etc/resolv.conf
                        [ ! X"$2" = X ] && shift && echo "nameserver $1" >> /etc/resolv.conf
                        [ ! X"$2" = X ] && shift && echo "nameserver $1" >> /etc/resolv.conf
                    fi

                    #-----------------------
                    # IPv4 configs
                    #
                    case X"$ipv" in
                        X*4*)
                            echo -n 'IPv4 addr of this host -> '; read myv4addr
                            echo -n 'netmask                -> '; read mynetmask
                            echo -n 'default route          -> '; read mygw

                            echo "inet $myv4addr $mynetmask NONE" >> /etc/hostname.$mynic
                            echo "$mygw" > /etc/mygate
                            echo "$myv4addr $myfqdn ${myfqdn%%.*}" >> /etc/hosts

                            echo 'net.inet.ip.forwarding=0'  >> /etc/sysctl.conf
                            echo 'net.inet.ip.mforwarding=0' >> /etc/sysctl.conf
                            ;;
                    esac
                fi

                #-----------------------
                # IPv6 configs
                #
                case X"$ipv" in
                    X*6*)
                        echo 'rtsol' >> /etc/hostname.$mynic
                        echo "rtsold_flags=$mynic" >> /etc/rc.conf.local
                        echo 'net.inet6.ip6.forwarding=0'   >> /etc/sysctl.conf
                        echo 'net.inet6.ip6.mforwarding=0'  >> /etc/sysctl.conf
                        ;;
                esac
                ;;
        esac

        #  resolving myhost
        #    This is for smtpd
        #
        if grep -q $myhost /etc/hosts
        then
            :
        else
            echo "127.0.0.1 $myhost" >> /etc/hosts
            echo "::1       $myhost" >> /etc/hosts
        fi

        # now disable to use prepared keys;
        #
        # To use this, uncomment following comment lines
        # then remove or comment 'ans=y' line
        #
        ans=y; # now force to generate keys

        case X"$ans" in
            X[Nn]*)
                :
            ;;
            *)
            rm -f /etc/ssh/*_key* /etc/isakmpd/local.pub /etc/isakmpd/private/local.key
            ;;
        esac

        break
        ;;

        #-----------------------
        #-----------------------
        # Restore from USB flash mode
        #-----------------------
        #-----------------------
        #
        X3)
        echo "usbflash" > /boottmp/boot_mode

        #-----------------------
        # Re-scan and build device list
        #
        scan_disks

        #-------------------------------
        # ask user for FuguIta's operating device
        #
        if [ X"$part_sto" = X ]; then
            echo "Warning: None of FuguIta's storage device(s) found."
            continue
        else
            echo "FuguIta's storage device(s): ${part_sto}."
            set -- $part_sto
            if [ $# -eq 1 ]; then
                def_sdev="$1"
            else
                unset def_sdev
            fi
        fi

        if [ X = X"$noask_confdev" ]; then
            while :; do
                echo -n "Which is FuguIta's storage device? ${def_sdev:+[default: ${def_sdev}] }-> "
                read sdev
                [ -n "${def_sdev}${sdev}" ] && break
            done
            [ -z "${sdev}" ] && sdev="$def_sdev"
        else
            echo "Which is FuguIta's storage device? -> $noask_confdev"
            sdev="$noask_confdev"
            noask_confdev=''
        fi

        if [ X"$sdev" = X ]; then
            echo 'no device specified'
            continue
        fi

        usb_devname=/dev/${sdev}
        echo "$usb_devname" > /boottmp/boot_restore_devname

        #-----------------------
        # mount user's storage
        #
        usb_devname=`cat /boottmp/boot_restore_devname`
        if mount -r "$usb_devname" /mnt; then
            #-----------------------
            # select config files
            #
            if [ ! -d /mnt/livecd-config ]; then
                echo "cannot find config dir on $usb_devname"
                umount "$usb_devname"
                continue
            fi

            while :; do
                echo "$usb_devname : available data;"
                (if cd /mnt/livecd-config; then
                     cd $osrel/$osmac 2>/dev/null
                     echo; ls -C; echo
                 fi)
                echo -n 'config name -> '
                if [ X = X"$noask_confdir" ]; then
                    read confdir
                else
                    echo $noask_confdir
                    confdir="$noask_confdir"
                    noask_confdir=''
                fi

                if [ X"$confdir" = X ]; then
                    echo 'conf dir not specified'
                    umount "$usb_devname"
                    continue 2
                elif [ -d /mnt/livecd-config/$osrel/$osmac/$confdir -o \
                       -d /mnt/livecd-config/$confdir ]; then
                    echo "$confdir" > /boottmp/boot_user_config
                    break
                else
                    echo 'cannot find such data'
                    umount "$usb_devname"
                    continue 2
                fi
            done

            #-----------------------
            # copying to ram
            #
            echo "Copying files from flash to ram ... "
            if cd /mnt/livecd-config/$osrel/$osmac/$confdir 2>/dev/null || \
               cd /mnt/livecd-config/$confdir; then
                pax -rwpe . /ram
            fi
            echo "done"

            #-----------------------
            # symlink from / to ram
            #
            cd /
            rm -rf /tmp
            mv /etc /bootetc
            ln -sf ram/* . 2> /dev/null
            cp /boottmp/fstab /etc

            #-------------------------------------------
            # symlink rest of contents from / to System Storage
            #
            ln -s fuguita/* . 2> /dev/null

            umount /mnt
        else
            echo "Failed to mount user's storage"
            continue
        fi

        #-------------------------------------------
        # unmount operating device if not needed
        #

        # check if the origin boot mode is 2 or not
        #
        if [ ! -L /usr/fuguita/version ]; then
            umount /fuguita
            vnconfig -u ${vn_devname}
            umount /sysmedia

            # check if FuguIta-*.iso mounted
            #
            if mount | grep -q "/sysmedia-iso"; then
                vnconfig -u ${vn_devname_iso}
                umount /sysmedia-iso
            fi

            # modify /etc/fstab
            #
            egrep -v ' /(sysmedia|sysmedia-iso|fuguita) ' /etc/fstab > /etc/fstab.tmp
            mv /etc/fstab.tmp /etc/fstab
        fi

        break
        ;;

        #-----------------------
        #-----------------------
        # Restore from floppy mode
        #-----------------------
        #-----------------------
        #
        X4)
        echo "floppy" > /boottmp/boot_mode

        #-----------------------
        # copying to ram
        #
        if mount -r /dev/fd0a /mnt; then
            if [ -r /mnt/livecd-retr.sh.inc ]; then
                cp -p /boottmp/livecd-retr.sh.inc /boottmp/livecd-retr.sh.inc.orig
                cat /mnt/livecd-retr.sh.inc > /boottmp/livecd-retr.sh.inc
                .  /boottmp/livecd-retr.sh.inc
                umount /mnt
            else
                echo "Retrieval script not found on fd0a."
                umount /mnt
                continue
            fi
        else
            echo "Failed to read /mnt/livecd-config.tar.gz on /dev/fd0a"
            continue
        fi

        break
        ;;

        #-----------------------
        #-----------------------
        # Interactive shell mode
        #-----------------------
        #-----------------------
        #
        X5)
        echo "intr-shell" > /boottmp/boot_mode
        echo "==INTERACTIVE SHELL MODE================
=
= An interactive shell invoked for manual operation.
= Now, just System Storage mounted on /fuguita.
=
= After exit this shell, select boot mode again.
=
========================================"
        PATH="/fuguita/sbin:/fuguita/bin" /fuguita/bin/sh
        ;;

        *) echo "What?" ;;
    esac
done

#====================
# remove unused directories / files
#
rm -f /boot.catalog /cdboot /cdbr /rr_moved
rmdir /sysmedia-iso 2> /dev/null

echo "========================================"
date > /boottmp/boot_livecd_rc_ends

#========================================
# chain original /etc/rc
#

exec /bin/ksh /etc/rc "$init_args"
